'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _createDecoratedObject(descriptors) { var target = {}; for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = true; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } } if (descriptor.initializer) { descriptor.value = descriptor.initializer.call(target); } Object.defineProperty(target, key, descriptor); } return target; }

var _urlJoin = require('url-join');

var _urlJoin2 = _interopRequireDefault(_urlJoin);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _decorators = require('./decorators');

var log = (0, _debug2['default'])('bitbucketjs:repo');
var path = '/2.0/teams';

module.exports = function (opts) {
  var request = opts.request;

  return _createDecoratedObject([{
    key: 'fetch',
    value: function fetch(teamname) {
      return request.get((0, _urlJoin2['default'])(opts.apiRoot, path, teamname));
    }
  }, {
    key: 'followers',
    value: function followers(teamname) {
      return request.get((0, _urlJoin2['default'])(opts.apiRoot, path, teamname, 'followers'));
    }
  }, {
    key: 'mine',
    decorators: [(0, _decorators.authenticated)(request)],
    value: function mine() {
      var role = arguments.length <= 0 || arguments[0] === undefined ? 'member' : arguments[0];

      return request.get((0, _urlJoin2['default'])(opts.apiRoot, path)).query({ 'role': role });
    }
  }]);
};